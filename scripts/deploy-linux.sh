#!/bin/bash

# Smart-Trade Deploy Script for Linux VPS
# Autor: Emanuel Luis
# Data: 2025-07-04

set -e  # Exit on any error

echo "üöÄ SMART-TRADE DEPLOY SCRIPT FOR LINUX VPS"
echo "=========================================="
echo

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se est√° rodando como root ou com sudo
if [[ $EUID -eq 0 ]]; then
   log_warning "Rodando como root. Recomendado usar usu√°rio normal com sudo."
fi

# Verificar Node.js
if ! command -v node &> /dev/null; then
    log_error "Node.js n√£o encontrado. Instale Node.js 18+ primeiro."
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    log_error "Node.js vers√£o $NODE_VERSION encontrada. Necess√°rio vers√£o 18+."
    exit 1
fi

log_success "Node.js $(node --version) encontrado"

# Verificar PM2
if ! command -v pm2 &> /dev/null; then
    log_info "PM2 n√£o encontrado. Instalando..."
    npm install -g pm2
    log_success "PM2 instalado"
else
    log_success "PM2 $(pm2 --version) encontrado"
fi

# Verificar Git
if ! command -v git &> /dev/null; then
    log_error "Git n√£o encontrado. Instale git primeiro."
    exit 1
fi

log_success "Git $(git --version) encontrado"

# Definir diret√≥rio de instala√ß√£o
INSTALL_DIR="/var/www/smart-trade"
BACKUP_DIR="/var/backups/smart-trade"

# Criar backup se j√° existir instala√ß√£o
if [ -d "$INSTALL_DIR" ]; then
    log_info "Instala√ß√£o existente encontrada. Criando backup..."
    sudo mkdir -p "$BACKUP_DIR"
    BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
    sudo cp -r "$INSTALL_DIR" "$BACKUP_DIR/$BACKUP_NAME"
    log_success "Backup criado em $BACKUP_DIR/$BACKUP_NAME"
fi

# Clonar ou atualizar reposit√≥rio
if [ -d "$INSTALL_DIR" ]; then
    log_info "Atualizando c√≥digo existente..."
    cd "$INSTALL_DIR"
    git pull origin master
else
    log_info "Clonando reposit√≥rio..."
    sudo mkdir -p /var/www
    cd /var/www
    sudo git clone https://github.com/emanuelsistemas/smart-trade.git
    sudo chown -R $USER:$USER smart-trade
    cd smart-trade
fi

log_success "C√≥digo atualizado"

# Instalar depend√™ncias
log_info "Instalando depend√™ncias..."

# Depend√™ncias do servidor
cd server
npm install
log_success "Depend√™ncias do servidor instaladas"

# Depend√™ncias do cliente
cd ../client
npm install
log_success "Depend√™ncias do cliente instaladas"

# Depend√™ncias compartilhadas
cd ../shared
npm install
log_success "Depend√™ncias compartilhadas instaladas"

cd ..

# Build da aplica√ß√£o
log_info "Fazendo build da aplica√ß√£o..."

# Build do servidor
cd server
npm run build
log_success "Build do servidor conclu√≠do"

# Build do cliente
cd ../client
npm run build
log_success "Build do cliente conclu√≠do"

cd ..

# Criar diret√≥rios necess√°rios
log_info "Criando diret√≥rios necess√°rios..."
mkdir -p logs
mkdir -p server/data
log_success "Diret√≥rios criados"

# Configurar PM2
log_info "Configurando PM2..."

# Parar processos existentes
pm2 delete smart-trade-backend 2>/dev/null || true

# Iniciar aplica√ß√£o
pm2 start ecosystem.linux.config.js

# Salvar configura√ß√£o PM2
pm2 save

# Configurar PM2 para iniciar no boot (se n√£o configurado)
if ! pm2 startup | grep -q "already"; then
    log_info "Configurando PM2 para iniciar no boot..."
    pm2 startup
    log_warning "Execute o comando mostrado acima para configurar inicializa√ß√£o autom√°tica"
fi

log_success "PM2 configurado"

# Verificar status
log_info "Verificando status da aplica√ß√£o..."
pm2 status

# Verificar se as portas est√£o abertas
if netstat -tlnp | grep -q ":3001"; then
    log_success "Backend rodando na porta 3001"
else
    log_error "Backend n√£o est√° rodando na porta 3001"
fi

echo
echo "=========================================="
log_success "DEPLOY CONCLU√çDO COM SUCESSO!"
echo "=========================================="
echo
echo "üìä URLs da aplica√ß√£o:"
echo "   üîπ Backend:  http://$(hostname -I | awk '{print $1}'):3001"
echo "   üîπ WebSocket: ws://$(hostname -I | awk '{print $1}'):3002"
echo
echo "üí° Pr√≥ximos passos:"
echo "   1. Configure o Nginx como proxy reverso"
echo "   2. Configure SSL com Let's Encrypt"
echo "   3. Configure o firewall"
echo "   4. Configure backups autom√°ticos"
echo
echo "üìã Comandos √∫teis:"
echo "   pm2 status          - Ver status dos processos"
echo "   pm2 logs            - Ver logs"
echo "   pm2 monit           - Monitor em tempo real"
echo "   pm2 restart all     - Reiniciar aplica√ß√£o"
echo
echo "üìñ Documenta√ß√£o completa: DEPLOY-VPS-LINUX.md"
echo
